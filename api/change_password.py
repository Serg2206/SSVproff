#!/usr/bin/env python3
"""
User password management script.

This script allows you to update passwords for existing users
or create new users if they don't exist.

Usage:
    python change_password.py <username> <new_password>
    
Examples:
    # Update password for existing user
    python change_password.py admin newpassword123
    
    # Create new user (if doesn't exist)
    python change_password.py john secretpassword
"""
import sys
import os
from pathlib import Path
from datetime import datetime

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy.orm import Session
from app.db.session import SessionLocal
from app.models.user import User
from app.core.security import get_password_hash


def update_or_create_user(username: str, new_password: str) -> bool:
    """
    Update password for existing user or create new user if doesn't exist.
    
    Args:
        username: Username to update or create
        new_password: New password to set
        
    Returns:
        True if operation successful, False otherwise
    """
    db = SessionLocal()
    
    try:
        # Check if user exists
        user = db.query(User).filter(User.username == username).first()
        
        if user:
            # User exists - update password
            print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("=" * 60)
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {username}")
            print("üîí –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è...")
            
            user.hashed_password = get_password_hash(new_password)
            user.updated_at = datetime.utcnow()
            
            db.commit()
            db.refresh(user)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω")
            print(f"üìß Email: {user.email}")
            print(f"üîë –†–æ–ª—å: {'–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if user.is_superuser else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
            print(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {user.updated_at.strftime('%Y-%m-%d %H:%M:%S.%f')}")
            print("=" * 60)
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            return True
        else:
            # User doesn't exist - create new user
            print(f"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("=" * 60)
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            print("üîí –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...")
            
            new_user = User(
                email=f"{username}@example.com",
                username=username,
                hashed_password=get_password_hash(new_password),
                is_active=True,
                is_superuser=True,  # New users are created as superusers
            )
            
            db.add(new_user)
            db.commit()
            db.refresh(new_user)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —Å–æ–∑–¥–∞–Ω")
            print(f"üìß Email: {new_user.email}")
            print(f"üîë –†–æ–ª—å: –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            print(f"üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω")
            print(f"üïê –°–æ–∑–¥–∞–Ω: {new_user.created_at.strftime('%Y-%m-%d %H:%M:%S.%f')}")
            print("=" * 60)
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("\n‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print(f"   1. Email –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {new_user.email}")
            print(f"   2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∞–º–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print(f"   3. –ò–∑–º–µ–Ω–∏—Ç–µ email –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print("=" * 60)
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
        db.rollback()
        return False
        
    finally:
        db.close()


def main() -> None:
    """Main function."""
    # Check command line arguments
    if len(sys.argv) != 3:
        print("=" * 60)
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        print("=" * 60)
        print("\nüìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(f"   python {sys.argv[0]} <username> <new_password>")
        print("\nüìù –ü—Ä–∏–º–µ—Ä—ã:")
        print(f"   python {sys.argv[0]} admin newpassword123")
        print(f"   python {sys.argv[0]} john secretpassword")
        print("\nüí° –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç:")
        print("   ‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Üí –æ–±–Ω–æ–≤–∏—Ç –ø–∞—Ä–æ–ª—å")
        print("   ‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Üí —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("=" * 60)
        sys.exit(1)
    
    username = sys.argv[1]
    new_password = sys.argv[2]
    
    # Validate inputs
    if not username or not username.strip():
        print("‚ùå –û—à–∏–±–∫–∞: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        sys.exit(1)
    
    if not new_password or len(new_password) < 6:
        print("‚ùå –û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
        sys.exit(1)
    
    # Update or create user
    success = update_or_create_user(username.strip(), new_password)
    
    if not success:
        sys.exit(1)


if __name__ == "__main__":
    main()

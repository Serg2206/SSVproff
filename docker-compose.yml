
# Docker Compose для локальной разработки
# Запуск: docker-compose up -d
version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:16-alpine
    container_name: ssvproff-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ssvproff}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ssvproff_dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-ssvproff}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ssvproff}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ssvproff-network

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: ssvproff-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ssvproff-network

  # FastAPI Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: ssvproff-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ssvproff}:${POSTGRES_PASSWORD:-ssvproff_dev_password}@postgres:5432/${POSTGRES_DB:-ssvproff}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    ports:
      - "${API_PORT:-8001}:8001"
    volumes:
      - ./api:/app:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ssvproff-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

  # Next.js Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: development
    container_name: ssvproff-web
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NODE_ENV=development
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - ./web:/app:ro
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    networks:
      - ssvproff-network
    command: npm run dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ssvproff-network:
    driver: bridge
